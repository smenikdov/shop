//
enum OrderStatuses {
    PREPARATION
    DELIVERY
    WAITING
    RECEIVED
}

enum UserRole {
    USER
    ADMIN
}

enum UserSex {
    MALE
    FEMALE
}

//  ============================================= GLOBAL =============================================

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//  ============================================= USERS =============================================

model Session {
    id              Int      @id @default(autoincrement())
    accessToken     String   @unique @map("session_token")
    refreshToken    String   @unique @map("refresh_token")
    userId          Int      @map("user_id")
    accessExpiresAt DateTime
    refreshExpiresAt DateTime
    ip              String?
    userAgent       String?   @map("user_agent")
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id        Int       @id @default(autoincrement())
    email     String?   @unique
    phone     String?   @unique
    name      String?
    firstName String?
    lastName  String?
    birthday  DateTime?
    sex       UserSex?
    password  String
    role      UserRole

    sessions Session[]
    basket   Basket?
    payments Payment[]
    orders   Order[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "users")
}

model UserAddress {
    id Int @id @default(autoincrement())

    @@map(name: "useraddress")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

//  ============================================= PRODUCTS =============================================
model ProductCategory {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime  @default(now()) @map(name: "created_at")
    updatedAt   DateTime  @updatedAt @map(name: "updated_at")
    products    Product[]

    @@map(name: "productcategory")
}

model Product {
    id               Int              @id @default(autoincrement())
    name             String
    price            Float
    prevPrice        Float?           @map(name: "prev_price")
    rating           Float            @default(0)
    quantity         Int
    shortDescription String           @map(name: "short_description")
    longDescription  String?          @map(name: "long_description")
    images           String[]
    category         ProductCategory  @relation(fields: [categoryId], references: [id])
    categoryId       Int              @map(name: "category_id")
    discount         ProductDiscount? @relation(fields: [discountId], references: [id])
    discountId       Int?
    orderItems       OrderItem[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    // TODO advantages, properties, призовые очки,
    @@map(name: "products")
}

model ProductDiscount {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    discount    Float     @default(0)
    active      Boolean   @default(false)
    products    Product[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "productdiscount")
}

//  ============================================= ORDER =============================================

model Order {
    id         Int           @id @default(autoincrement())
    status     OrderStatuses
    total      Float
    orderItems OrderItem[]
    payment    Payment?
    userId     Int           @map(name: "user_id")
    user       User          @relation(fields: [userId], references: [id])

    @@map(name: "orders")
}

model OrderItem {
    id        Int     @id @default(autoincrement())
    quantity  Int     @default(1)
    productId Int     @map(name: "product_id")
    product   Product @relation(fields: [productId], references: [id])
    orderId   Int     @map(name: "order_id")
    order     Order   @relation(fields: [orderId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "orderitems")
}

//  ============================================= BASKET =============================================
model Basket {
    id     Int  @id @default(autoincrement())
    userId Int  @unique() @map(name: "user_id")
    user   User @relation(fields: [userId], references: [id])
    // TODO
    // items OrderItem[]

    @@map(name: "baskets")
}

//  ============================================= BASKET =============================================
model Payment {
    id      Int   @id @default(autoincrement())
    userId  Int   @map(name: "user_id")
    user    User  @relation(fields: [userId], references: [id])
    order   Order @relation(fields: [orderId], references: [id])
    orderId Int   @unique() @map(name: "order_id")
    // TODO 

    @@map(name: "payments")
}
