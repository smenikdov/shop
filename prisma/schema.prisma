//
enum OrderStatus {
    PREPARATION
    DELIVERY
    WAITING
    RECEIVED
}

enum PaymentStatus {
    SUCCESS
}

enum UserRole {
    USER
    ADMIN
    GUEST
}

enum UserSex {
    MALE
    FEMALE
}

enum DeliveryCompany {
    BOXBERRY
    CDEK
    DELLIN
}

enum DeliveryType {
    COURIER
    POINT
}

//  ============================================= GLOBAL =============================================

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//  ============================================= USERS =============================================

model Session {
    id               Int      @id @default(autoincrement())
    accessToken      String   @unique @map("session_token")
    refreshToken     String   @unique @map("refresh_token")
    userId           Int      @map("user_id")
    accessExpiresAt  DateTime
    refreshExpiresAt DateTime
    ip               String?
    userAgent        String?  @map("user_agent")
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map("sessions")
}

model User {
    id            Int            @id @default(autoincrement())
    email         String?        @unique
    phone         String?        @unique
    lastName      String?        @map(name: "last_name")
    firstName     String?        @map(name: "first_name")
    patronymic    String?
    birthday      DateTime?
    sex           UserSex?
    password      String?
    role          UserRole
    cityId        Int            @map("city_id")
    sessions      Session[]
    basketItems   BasketItem[]
    favoriteItems FavoriteItem[]
    checkoutItems CheckoutItem[]
    payments      Payment[]
    orders        Order[]
    city          City           @relation(fields: [cityId], references: [id])

    createdAt    DateTime       @default(now()) @map(name: "created_at")
    updatedAt    DateTime       @updatedAt @map(name: "updated_at")

    @@map(name: "users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

//  ============================================= PRODUCTS =============================================
model ProductCategory {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime  @default(now()) @map(name: "created_at")
    updatedAt   DateTime  @updatedAt @map(name: "updated_at")
    products    Product[]

    @@map(name: "productcategory")
}

model Product {
    id               Int             @id @default(autoincrement())
    name             String
    price            Float
    rating           Float           @default(0)
    quantity         Int
    shortDescription String          @map(name: "short_description")
    longDescription  String?         @map(name: "long_description")
    images           String[]
    category         ProductCategory @relation(fields: [categoryId], references: [id])
    categoryId       Int             @map(name: "category_id")
    offer            ProductOffer?   @relation(fields: [offerId], references: [id])
    offerId          Int?

    width  Int
    height Int
    length Int
    weight Int

    basketItems   BasketItem[]
    favoriteItems FavoriteItem[]
    orderItems    OrderItem[]
    checkoutItems CheckoutItem[]

    createdAt    DateTime       @default(now()) @map(name: "created_at")
    updatedAt    DateTime       @updatedAt @map(name: "updated_at")

    // TODO advantages, properties, призовые очки,
    @@map(name: "products")
}

model ProductOffer {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    discount    Float     @default(0)
    isActive    Boolean   @default(false)
    products    Product[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "productoffers")
}

//  ============================================= ORDER =============================================

model Order {
    id              Int               @id @default(autoincrement())
    status          OrderStatus
    total           Float
    orderItems      OrderItem[]
    payment         Payment?
    userId          Int               @map(name: "user_id")
    user            User              @relation(fields: [userId], references: [id])
    deliveryCompany DeliveryCompany
    deliveryType    DeliveryType
    cityId          Int               @map("city_id")
    city            City              @relation(fields: [cityId], references: [id])
    notice          String?

    @@map(name: "orders")
}

model OrderItem {
    id        Int     @id @default(autoincrement())
    quantity  Int     @default(1)
    productId Int     @map(name: "product_id")
    product   Product @relation(fields: [productId], references: [id])
    orderId   Int     @map(name: "order_id")
    order     Order   @relation(fields: [orderId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@unique([productId, orderId])
    @@map(name: "orderitems")
}

//  ============================================= BASKET =============================================
model BasketItem {
    id        Int     @id @default(autoincrement())
    quantity  Int     @default(1)
    productId Int     @map(name: "product_id")
    product   Product @relation(fields: [productId], references: [id])
    userId    Int     @map(name: "user_id")
    user      User    @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@unique([productId, userId])
    @@map(name: "basketitems")
}

//  ============================================= CHECKOUT =============================================
model CheckoutItem {
    id        Int     @id @default(autoincrement())
    quantity  Int     @default(1)
    productId Int     @map(name: "product_id")
    product   Product @relation(fields: [productId], references: [id])
    userId    Int     @map(name: "user_id")
    user      User    @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@unique([productId, userId])
    @@map(name: "checkoutitems")
}

//  ============================================= FAVORITE =============================================
model FavoriteItem {
    id        Int     @id @default(autoincrement())
    productId Int     @map(name: "product_id")
    product   Product @relation(fields: [productId], references: [id])
    userId    Int     @map(name: "user_id")
    user      User    @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@unique([productId, userId])
    @@map(name: "favoriteitems")
}

//  ============================================= BASKET =============================================
model Payment {
    id      Int             @id @default(autoincrement())
    userId  Int             @map(name: "user_id")
    user    User            @relation(fields: [userId], references: [id])
    order   Order           @relation(fields: [orderId], references: [id])
    orderId Int             @unique() @map(name: "order_id")
    status  PaymentStatus
    // TODO 

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "payments")
}

//  ============================================= CODES =============================================
model SmsCode {
    id        Int      @id @default(autoincrement())
    phone     String
    code      String
    isActive  Boolean  @default(false)
    expiresAt DateTime

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "sms_codes")
}

model EmailCode {
    id        Int      @id @default(autoincrement())
    email     String
    code      String
    isActive  Boolean  @default(false)
    expiresAt DateTime

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "email_codes")
}

//  ============================================= ADDRESS =============================================
model City {
    id           Int    @id @default(autoincrement())
    name         String
    boxberryCode Int?   @map(name: "boxberry_code")
    cdekCode     Int?   @map(name: "cdek_code")
    dellinCode   Int?   @map(name: "dellin_code")

    users  User[]
    orders Order[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "cities")
}

model OrderAddress {
    id Int @id @default(autoincrement())

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "orderaddresses")
}

model Intaker {
    id Int @id @default(autoincrement())

    arriveAt        DateTime
    deliveryCompany DeliveryCompany

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "intakers")
}
